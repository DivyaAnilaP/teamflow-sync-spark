
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Video, Mic, MicOff, VideoOff, Phone, Mail, Users, Calendar } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

interface Meeting {
  id: string;
  title: string;
  participants: string[];
  participantEmails: string[];
  date: string;
  time: string;
  duration: number;
  type: 'video' | 'audio';
  status: 'scheduled' | 'ongoing' | 'completed';
  notes?: string;
  recordings?: string[];
}

interface MeetingNotesProps {
  user: any;
  workspace: any;
}

export const MeetingNotes: React.FC<MeetingNotesProps> = ({ user, workspace }) => {
  const [meetings, setMeetings] = useState<Meeting[]>([
    {
      id: '1',
      title: 'Project Kickoff',
      participants: ['John Doe', 'Jane Smith'],
      participantEmails: ['john@company.com', 'jane@company.com'],
      date: '2024-12-22',
      time: '14:00',
      duration: 60,
      type: 'video',
      status: 'completed',
      notes: 'Discussed project timeline and deliverables. Assigned initial tasks.',
      recordings: ['recording_1.mp4']
    }
  ]);

  const [showNewMeetingForm, setShowNewMeetingForm] = useState(false);
  const [isInCall, setIsInCall] = useState(false);
  const [callType, setCallType] = useState<'video' | 'audio'>('video');
  const [isMicOn, setIsMicOn] = useState(true);
  const [isVideoOn, setIsVideoOn] = useState(true);

  const [newMeeting, setNewMeeting] = useState({
    title: '',
    participantEmails: '',
    date: '',
    time: '',
    duration: 30,
    type: 'video' as 'video' | 'audio'
  });

  const scheduleMeeting = () => {
    if (!newMeeting.title || !newMeeting.participantEmails) {
      toast({
        title: "Error",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }

    const emails = newMeeting.participantEmails.split(',').map(email => email.trim());
    const meeting: Meeting = {
      id: Date.now().toString(),
      title: newMeeting.title,
      participants: emails.map(email => email.split('@')[0]),
      participantEmails: emails,
      date: newMeeting.date,
      time: newMeeting.time,
      duration: newMeeting.duration,
      type: newMeeting.type,
      status: 'scheduled'
    };

    setMeetings(prev => [...prev, meeting]);

    // Send email invitations
    sendMeetingInvites(meeting);

    setNewMeeting({
      title: '',
      participantEmails: '',
      date: '',
      time: '',
      duration: 30,
      type: 'video'
    });
    setShowNewMeetingForm(false);

    toast({
      title: "Meeting Scheduled! ðŸ“…",
      description: `Meeting invites sent to ${emails.length} participants`,
    });
  };

  const sendMeetingInvites = (meeting: Meeting) => {
    // Mock email sending
    console.log('Sending meeting invites:', {
      title: meeting.title,
      emails: meeting.participantEmails,
      meetingLink: `https://${workspace.name}.meet.lovable.app/room/${meeting.id}`,
      date: meeting.date,
      time: meeting.time,
      type: meeting.type
    });
  };

  const startCall = (meeting: Meeting) => {
    setIsInCall(true);
    setCallType(meeting.type);
    toast({
      title: `${meeting.type === 'video' ? 'Video' : 'Audio'} Call Started`,
      description: "AI is recording notes automatically",
    });
  };

  const endCall = () => {
    setIsInCall(false);
    toast({
      title: "Call Ended",
      description: "Meeting notes have been generated by AI",
    });
  };

  return (
    <div className="space-y-6">
      {/* Active Call Interface */}
      {isInCall && (
        <Card className="border-green-500 bg-green-50">
          <CardContent className="p-6">
            <div className="text-center space-y-4">
              <h3 className="text-xl font-bold text-green-800">
                {callType === 'video' ? 'Video' : 'Audio'} Call in Progress
              </h3>
              
              {callType === 'video' && (
                <div className="grid grid-cols-2 gap-4 max-w-md mx-auto">
                  <div className="bg-gray-800 rounded-lg aspect-video flex items-center justify-center text-white">
                    <div className="text-center">
                      <Video size={24} className="mx-auto mb-2" />
                      <p className="text-sm">Your Video</p>
                    </div>
                  </div>
                  <div className="bg-gray-700 rounded-lg aspect-video flex items-center justify-center text-white">
                    <div className="text-center">
                      <Users size={24} className="mx-auto mb-2" />
                      <p className="text-sm">Participant</p>
                    </div>
                  </div>
                </div>
              )}

              <div className="flex justify-center gap-4">
                <Button
                  variant={isMicOn ? "default" : "destructive"}
                  size="sm"
                  onClick={() => setIsMicOn(!isMicOn)}
                >
                  {isMicOn ? <Mic size={16} /> : <MicOff size={16} />}
                </Button>
                
                {callType === 'video' && (
                  <Button
                    variant={isVideoOn ? "default" : "destructive"}
                    size="sm"
                    onClick={() => setIsVideoOn(!isVideoOn)}
                  >
                    {isVideoOn ? <Video size={16} /> : <VideoOff size={16} />}
                  </Button>
                )}
                
                <Button variant="destructive" onClick={endCall}>
                  <Phone size={16} className="mr-2" />
                  End Call
                </Button>
              </div>
              
              <Badge className="bg-red-500">ðŸ”´ AI Recording Notes</Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Schedule New Meeting */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Calendar className="text-blue-500" size={24} />
              Meeting Scheduler
            </CardTitle>
            <Button 
              onClick={() => setShowNewMeetingForm(true)}
              className="bg-gradient-to-r from-blue-500 to-purple-500"
            >
              Schedule Meeting
            </Button>
          </div>
        </CardHeader>

        {showNewMeetingForm && (
          <CardContent className="space-y-4">
            <input
              type="text"
              placeholder="Meeting title *"
              value={newMeeting.title}
              onChange={(e) => setNewMeeting(prev => ({ ...prev, title: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
            
            <textarea
              placeholder="Participant emails (comma separated) *"
              value={newMeeting.participantEmails}
              onChange={(e) => setNewMeeting(prev => ({ ...prev, participantEmails: e.target.value }))}
              className="w-full p-2 border border-gray-300 rounded-md"
              rows={2}
            />
            
            <div className="grid grid-cols-2 gap-4">
              <input
                type="date"
                value={newMeeting.date}
                onChange={(e) => setNewMeeting(prev => ({ ...prev, date: e.target.value }))}
                className="p-2 border border-gray-300 rounded-md"
              />
              <input
                type="time"
                value={newMeeting.time}
                onChange={(e) => setNewMeeting(prev => ({ ...prev, time: e.target.value }))}
                className="p-2 border border-gray-300 rounded-md"
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Duration (minutes)</label>
                <input
                  type="number"
                  min="15"
                  max="240"
                  value={newMeeting.duration}
                  onChange={(e) => setNewMeeting(prev => ({ ...prev, duration: Number(e.target.value) }))}
                  className="w-full p-2 border border-gray-300 rounded-md"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Call Type</label>
                <select
                  value={newMeeting.type}
                  onChange={(e) => setNewMeeting(prev => ({ ...prev, type: e.target.value as 'video' | 'audio' }))}
                  className="w-full p-2 border border-gray-300 rounded-md"
                >
                  <option value="video">Video Call</option>
                  <option value="audio">Audio Call</option>
                </select>
              </div>
            </div>
            
            <div className="flex gap-2">
              <Button onClick={scheduleMeeting}>Schedule & Send Invites</Button>
              <Button variant="outline" onClick={() => setShowNewMeetingForm(false)}>
                Cancel
              </Button>
            </div>
          </CardContent>
        )}
      </Card>

      {/* Meetings List */}
      <Card>
        <CardHeader>
          <CardTitle>Meetings & Notes</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {meetings.map(meeting => (
            <div key={meeting.id} className="border rounded-lg p-4 space-y-3">
              <div className="flex items-start justify-between">
                <div>
                  <h4 className="font-semibold">{meeting.title}</h4>
                  <div className="flex items-center gap-4 text-sm text-gray-600 mt-1">
                    <span className="flex items-center gap-1">
                      <Calendar size={14} />
                      {meeting.date} at {meeting.time}
                    </span>
                    <span className="flex items-center gap-1">
                      {meeting.type === 'video' ? <Video size={14} /> : <Mic size={14} />}
                      {meeting.type === 'video' ? 'Video' : 'Audio'} ({meeting.duration}min)
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge 
                    variant={meeting.status === 'completed' ? 'default' : 
                            meeting.status === 'ongoing' ? 'destructive' : 'secondary'}
                  >
                    {meeting.status}
                  </Badge>
                  {meeting.status === 'scheduled' && (
                    <Button size="sm" onClick={() => startCall(meeting)}>
                      Join Call
                    </Button>
                  )}
                </div>
              </div>
              
              <div className="flex items-center gap-2 text-sm">
                <Users size={14} />
                <span>Participants: {meeting.participants.join(', ')}</span>
              </div>
              
              {meeting.participantEmails.length > 0 && (
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <Mail size={14} />
                  <span>Invited: {meeting.participantEmails.join(', ')}</span>
                </div>
              )}
              
              {meeting.notes && (
                <div className="bg-gray-50 p-3 rounded">
                  <h5 className="font-medium text-sm mb-1">AI Generated Notes:</h5>
                  <p className="text-sm text-gray-700">{meeting.notes}</p>
                </div>
              )}
              
              {meeting.recordings && meeting.recordings.length > 0 && (
                <div className="flex items-center gap-2">
                  <Badge variant="outline">Recording Available</Badge>
                </div>
              )}
            </div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
};
